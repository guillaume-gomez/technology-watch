"""
Active Record Interface
"""
interface ActiveRecord {
  """
  Active Record cache key
  """
  cacheKey: String

  """
  created_at field from ActiveRecord
  """
  createdAt: ISO8601DateTime!

  """
  ID from ActiveRecord
  """
  id: ID!

  """
  update_at field from ActiveRecord
  """
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of BulkUpdateTags
"""
input BulkUpdateTagsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  tags: [TagBulkType!]!
}

"""
Autogenerated input type of CreateNote
"""
input CreateNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: NoteInput!
}

"""
Autogenerated input type of CreateTag
"""
input CreateTagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  tag: TagInput!
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: UserInput!
}

type Credential {
  accessToken: String!
  client: String!
  expiry: Int!
  tokenType: String!
  uid: String!
}

"""
Autogenerated input type of DestroyNote
"""
input DestroyNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of DestroyTag
"""
input DestroyTagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated input type of EditNote
"""
input EditNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  note: NoteEditType!
}

"""
Autogenerated input type of EditTag
"""
input EditTagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  tag: TagEditType!
}

"""
Autogenerated input type of EditUser
"""
input EditUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: UserEditType!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  """
  Add/Update and Destroy Tags
  """
  bulkUpdateTags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Parameters for BulkUpdateTags
    """
    input: BulkUpdateTagsInput!

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TagConnection!

  """
  Create a Note
  """
  createNote(
    """
    Parameters for CreateNote
    """
    input: CreateNoteInput!
  ): Note!

  """
  Create a Tag
  """
  createTag(
    """
    Parameters for CreateTag
    """
    input: CreateTagInput!
  ): Tag!

  """
  Create a User
  """
  createUser(
    """
    Parameters for CreateUser
    """
    input: CreateUserInput!
  ): User!

  """
  Destroy a Note
  """
  destroyNote(
    """
    Parameters for DestroyNote
    """
    input: DestroyNoteInput!
  ): Note!

  """
  Destroy a Tag
  """
  destroyTag(
    """
    Parameters for DestroyTag
    """
    input: DestroyTagInput!
  ): Tag!

  """
  Edit a Note
  """
  editNote(
    """
    Parameters for EditNote
    """
    input: EditNoteInput!
  ): Note!

  """
  Edit a Tag
  """
  editTag(
    """
    Parameters for EditTag
    """
    input: EditTagInput!
  ): Tag!

  """
  Edit a User
  """
  editUser(
    """
    Parameters for EditUser
    """
    input: EditUserInput!
  ): User!

  """
  An example field added by the generator
  """
  testField: String!
  userLogin(email: String!, password: String!): UserLoginPayload
  userLogout: UserLogoutPayload
  userResendConfirmation(email: String!, redirectUrl: String!): UserResendConfirmationPayload
  userSendPasswordReset(email: String!, redirectUrl: String!): UserSendPasswordResetPayload
  userSendPasswordResetWithToken(email: String!, redirectUrl: String!): UserSendPasswordResetWithTokenPayload
  userSignUp(confirmSuccessUrl: String, email: String!, name: String!, nickname: String!, password: String!, passwordConfirmation: String!): UserSignUpPayload
  userUpdatePassword(currentPassword: String, password: String!, passwordConfirmation: String!): UserUpdatePasswordPayload
  userUpdatePasswordWithToken(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): UserUpdatePasswordWithTokenPayload
}

type Note implements ActiveRecord {
  """
  Active Record cache key
  """
  cacheKey: String

  """
  created_at field from ActiveRecord
  """
  createdAt: ISO8601DateTime!
  description: String

  """
  ID from ActiveRecord
  """
  id: ID!
  link: String!
  markAsRead: Boolean!
  name: String!
  rating: Int
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TagConnection!
  timeToReadInMinutes: Int

  """
  update_at field from ActiveRecord
  """
  updatedAt: ISO8601DateTime!
  user: User!
}

"""
The connection type for Note.
"""
type NoteConnection {
  """
  A list of edges.
  """
  edges: [NoteEdge!]!

  """
  A list of nodes.
  """
  nodes: [Note!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

enum NoteDirection {
  ASC
  DESC
}

"""
An edge in a connection.
"""
type NoteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Note
}

"""
Properties for editing a Note
"""
input NoteEditType {
  """
  Note description
  """
  description: String

  """
  Note id
  """
  id: ID!

  """
  Note link
  """
  link: String

  """
  Flag to set as true if the note is read
  """
  markAsRead: Boolean

  """
  Note name
  """
  name: String

  """
  Note rating
  """
  rating: Int

  """
  List of tag ids
  """
  tags: [ID!]

  """
  Time to read the note in integer
  """
  timeToReadInMinutes: Int
}

"""
Properties for creating a Note
"""
input NoteInput {
  """
  Note description
  """
  description: String

  """
  Note link
  """
  link: String!

  """
  Note name
  """
  name: String!

  """
  Note rating
  """
  rating: Int

  """
  List of tag ids
  """
  tags: [ID!]

  """
  Time to read the note in minutes
  """
  timeToReadInMinutes: Int
}

enum NoteOrder {
  MARK_AS_READ
  RATING
  RECENT
  TIMES_TO_READ
}

"""
Properties for sorting notes
"""
input NoteOrderInput {
  """
  direction of the order
  """
  direction: NoteDirection!

  """
  type of order
  """
  order: NoteOrder!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  Get the current user
  """
  currentUser: User!

  """
  Get a Note
  """
  getNote(id: ID!): Note!

  """
  Get all Notes
  """
  getNotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    search by name
    """
    name: String
    orderType: NoteOrderInput

    """
    get only read notes/unread.
    """
    read: Boolean

    """
    filter by tags name (cumulative)
    """
    taggedWith: [ID!]
  ): NoteConnection!

  """
  Get a Tag
  """
  getTag(id: ID!): Tag!

  """
  Get all Tags
  """
  getTags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    search by name with name_contains
    """
    nameContains: String
  ): TagConnection!

  """
  Get a User
  """
  getUser(id: ID!): User!

  """
  Get all Users
  """
  getUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  An example field added by the generator
  """
  testField: String!
  userCheckPasswordToken(redirectUrl: String, resetPasswordToken: String!): User!
  userConfirmAccount(confirmationToken: String!, redirectUrl: String!): User!
}

type Tag implements ActiveRecord {
  """
  Active Record cache key
  """
  cacheKey: String
  color: String!

  """
  created_at field from ActiveRecord
  """
  createdAt: ISO8601DateTime!

  """
  ID from ActiveRecord
  """
  id: ID!
  name: String!

  """
  update_at field from ActiveRecord
  """
  updatedAt: ISO8601DateTime!
}

"""
Properties for add, edit and destroy Tags
"""
input TagBulkType {
  """
  Tag color
  """
  color: String

  """
  Tag id
  """
  destroy: Boolean

  """
  Tag id
  """
  id: ID

  """
  Tag name
  """
  name: String
}

"""
The connection type for Tag.
"""
type TagConnection {
  """
  A list of edges.
  """
  edges: [TagEdge!]!

  """
  A list of nodes.
  """
  nodes: [Tag!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Tag
}

"""
Properties for editing a Tag
"""
input TagEditType {
  """
  Tag color
  """
  color: String

  """
  Tag id
  """
  id: ID!

  """
  Tag name
  """
  name: String
}

"""
Properties for creating a Tag
"""
input TagInput {
  """
  Tag color
  """
  color: String

  """
  Tag name
  """
  name: String!
}

type User implements ActiveRecord {
  """
  Active Record cache key
  """
  cacheKey: String

  """
  created_at field from ActiveRecord
  """
  createdAt: ISO8601DateTime!
  email: String!

  """
  ID from ActiveRecord
  """
  id: ID!
  languageCode: String!
  name: String!
  nickname: String!
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TagConnection!
  themeMode: String!

  """
  update_at field from ActiveRecord
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge!]!

  """
  A list of nodes.
  """
  nodes: [User!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
Properties for editing a User
"""
input UserEditType {
  """
  user id
  """
  id: ID!

  """
  application language
  """
  languageCode: String

  """
  full name
  """
  name: String

  """
  nickname
  """
  nickname: String

  """
  theme mode choose by the user
  """
  themeMode: String
}

"""
Properties for creating a User
"""
input UserInput {
  """
  User email
  """
  email: String!

  """
  full name
  """
  name: String!

  """
  nickname
  """
  nickname: String!

  """
  User password
  """
  password: String!
}

"""
Autogenerated return type of UserLogin
"""
type UserLoginPayload {
  authenticatable: User!
  credentials: Credential!
}

"""
Autogenerated return type of UserLogout
"""
type UserLogoutPayload {
  authenticatable: User!
}

"""
Autogenerated return type of UserResendConfirmation
"""
type UserResendConfirmationPayload {
  message: String!
}

"""
Autogenerated return type of UserSendPasswordReset
"""
type UserSendPasswordResetPayload {
  message: String!
}

"""
Autogenerated return type of UserSendPasswordResetWithToken
"""
type UserSendPasswordResetWithTokenPayload {
  message: String!
}

"""
Autogenerated return type of UserSignUp
"""
type UserSignUpPayload {
  """
  Authentication credentials. Null if after signUp resource is not active for
  authentication (e.g. Email confirmation required).
  """
  credentials: Credential
  user: User
}

"""
Autogenerated return type of UserUpdatePassword
"""
type UserUpdatePasswordPayload {
  authenticatable: User!
}

"""
Autogenerated return type of UserUpdatePasswordWithToken
"""
type UserUpdatePasswordWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Resource must be signed_in for credentials to be returned.
  """
  credentials: Credential
}